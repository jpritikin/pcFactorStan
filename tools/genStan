#!/usr/bin/perl

# pcFactorStan is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# pcFactorStan is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with pcFactorStan.  If not, see <http://www.gnu.org/licenses/>.

use Modern::Perl '2018';
use Fatal qw(open rename unlink);
use File::Compare;

die "Must be run from top level" if !-e './tools/genStan';

my $commonData =
'  // dimensions
  int<lower=1> NPA;             // worths or players or objects or things
  int<lower=1> NCMP;            // unique comparisons
  int<lower=1> N;               // observations
  int<lower=1> numRefresh;      // when change in item/pa1/pa2';

my $responseData =
'  // response data
  int<lower=1, upper=NPA> pa1[numRefresh];
  int<lower=1, upper=NPA> pa2[numRefresh];
  int weight[NCMP];
  int pick[NCMP];
  int refresh[numRefresh];
  int numOutcome[numRefresh];';

my $unidim_ll =
'  real log_lik[N];

  {
    int cmpStart = 1;
    int cur = 1;

    for (rx in 1:numRefresh) {
      int nout = numOutcome[rx];
      int last = cur + nout - 1;
      log_lik[cur:last] =
        pairwise_loo(rcat, weight, nout, cmpStart, refresh[rx],
                     scale, alpha, theta[pa1[rx]], theta[pa2[rx]], cumTh);
      cmpStart += refresh[rx];
      cur += numOutcome[rx];
    }
  }
';

my $threshold_prior = 'threshold ~ normal(0, 2.0);';
my $multivariateThresholdPrior = "$threshold_prior";
my $alpha_prior = 'alpha ~ exponential(0.1);';

sub mkUnidim {
    my ($adapt, $ll) = @_;
    my $data = $adapt? "varCorrection" : "scale";
    my $xdata = $adapt? "\n  real alpha = 1.0;" : '';
    my $par = $adapt? "sigma" : "alpha";
    my $scaleDef = $adapt? "
  real scale = (sd(theta) ^ varCorrection)/1.749;" : "";
    my $theta_sd = $adapt? "sigma" : "1.0";
    my $prior = $adapt? 'sigma ~ lognormal(1, 1);' : $alpha_prior;
    my $llBody = $ll? $unidim_ll : '';

    my $unidim =
qq[data {
$commonData
  int<lower=1> NTHRESH;         // number of thresholds
  real $data;
$responseData
}
transformed data {
  int rcat[NCMP];$xdata

  for (cmp in 1:NCMP) {
    rcat[cmp] = pick[cmp] + NTHRESH + 1;
  }
}
parameters {
  vector[NPA] theta;
  vector[NTHRESH] threshold;
  real<lower=0> $par;
}
transformed parameters {
  vector[NTHRESH] cumTh = cumulative_sum(threshold);$scaleDef
}
model {
  $prior
  theta ~ normal(0, $theta_sd);
  $threshold_prior

  {
    int cmpStart = 1;
    for (rx in 1:numRefresh) {
      target += pairwise_logprob(rcat, weight, cmpStart, refresh[rx],
                                 scale, alpha, theta[pa1[rx]], theta[pa2[rx]], cumTh);
      cmpStart += refresh[rx];
    }
  }
}
generated quantities {
  real thetaVar = variance(theta);
$llBody}
];
}

sub mvtDataCommon {
    my ($data, $tdataDecl, $tdata) = @_;
    $data = '' if !defined $data;
    $tdataDecl = '' if !defined $tdataDecl;
    $tdata = '' if !defined $tdata;
qq[data {
$commonData
  int<lower=1> NITEMS;
  int<lower=1> NTHRESH[NITEMS];         // number of thresholds
  int<lower=1> TOFFSET[NITEMS];
  vector[NITEMS] scale;$data
$responseData
  int item[numRefresh];
}
transformed data {
  int totalThresholds = sum(NTHRESH);
  int rcat[NCMP];$tdataDecl
  {
    int cmpStart = 0;
    for (rx in 1:numRefresh) {
      int ix = item[rx];
      for (cmp in 1:refresh[rx]) {
        rcat[cmpStart + cmp] = pick[cmpStart + cmp] + NTHRESH[ix] + 1;
      }
      cmpStart += refresh[rx];
    }
  }$tdata
}];
}

my $multivariateThresholdParam =
  'vector[totalThresholds] threshold;';

my $multivariateThresholdTParamDecl =
  'vector[totalThresholds] cumTh;';

my $multivariateThresholdTParam =
'for (ix in 1:NITEMS) {
    int from = TOFFSET[ix];
    int to = TOFFSET[ix] + NTHRESH[ix] - 1;
    cumTh[from:to] = cumulative_sum(threshold[from:to]);
  }';

my $multivariateQuickLikelihood =
'{
    int cmpStart = 1;
    for (rx in 1:numRefresh) {
      int ix = item[rx];
      int from = TOFFSET[ix];
      int to = TOFFSET[ix] + NTHRESH[ix] - 1;
      target += pairwise_logprob(rcat, weight, cmpStart, refresh[rx],
                                 scale[ix], alpha[ix], theta[pa1[rx], ix],
                                 theta[pa2[rx], ix], cumTh[from:to]);
      cmpStart += refresh[rx];
    }
  }';

my $multivariateLooDecl =
  '
  real log_lik[N];
';

my $multivariateLoo = '

  {
    int cmpStart = 1;
    int cur = 1;
    for (rx in 1:numRefresh) {
      int ix = item[rx];
      int from = TOFFSET[ix];
      int to = TOFFSET[ix] + NTHRESH[ix] - 1;
      int nout = numOutcome[rx];
      int last = cur + nout - 1;
      log_lik[cur:last] =
        pairwise_loo(rcat, weight, nout, cmpStart, refresh[rx],
                     scale[ix], alpha[ix],
                     theta[pa1[rx],ix], theta[pa2[rx],ix], cumTh[from:to]);
      cmpStart += refresh[rx];
      cur += numOutcome[rx];
    }
  }';

sub mkCorModel {
    my ($ll) = @_;
    my $llDecl = $ll? $multivariateLooDecl : '';
    my $llBody = $ll? $multivariateLoo : '';
    mvtDataCommon().
qq[
parameters {
  $multivariateThresholdParam
  vector<lower=0>[NITEMS] alpha;
  matrix[NPA,NITEMS]      rawTheta;
  cholesky_factor_corr[NITEMS] rawThetaCorChol;
}
transformed parameters {
  $multivariateThresholdTParamDecl
  matrix[NPA,NITEMS]      theta;

  // non-centered parameterization due to thin data
  for (pa in 1:NPA) {
    theta[pa,] = (rawThetaCorChol * rawTheta[pa,]')';
  }
  $multivariateThresholdTParam
}
model {
  rawThetaCorChol ~ lkj_corr_cholesky(2);
  for (pa in 1:NPA) {
    rawTheta[pa,] ~ std_normal();
  }
  $multivariateThresholdPrior
  $alpha_prior
  $multivariateQuickLikelihood
}
generated quantities {$llDecl
  corr_matrix[NITEMS] thetaCor;
  thetaCor = multiply_lower_tri_self_transpose(rawThetaCorChol);$llBody
}
];
}

sub mkFactorModel {
    my ($ll, $psi) = @_;
    my $llDecl = $ll? $multivariateLooDecl : '';
    my $llBody = $ll? $multivariateLoo : '';

    my $psiData = '';
    my $psiParam = '';
    my $psiTparam = '';
    my $latentPrior = '
  rawFactor[,1] ~ std_normal();';
    if ($psi) {
	$psiData = '
  int<lower=1> NPSI;  // = NFACTORS * (NFACTORS-1) / 2;
  real psiScalePrior[NPSI];';
	$psiParam = '
  corr_matrix[NFACTORS] Psi;';
	$psiTparam = '
  cholesky_factor_corr[NFACTORS] CholPsi = cholesky_decompose(Psi);';
	$latentPrior = '
  {
    int px=1;
    for (cx in 1:(NFACTORS-1)) {
      for (rx in (cx+1):NFACTORS) {
        target += normal_lpdf(logit(0.5 + Psi[rx,cx]/2.0) | 0, psiScalePrior[px]);
        px += 1;
      }
    }
  }
  for (xx in 1:NPA) {
    rawFactor[xx,] ~ multi_normal_cholesky_lpdf(rep_vector(0, NFACTORS), CholPsi);
  }';
    }

    mvtDataCommon("
  vector[NITEMS] alpha;
  int<lower=1> NFACTORS;
  real factorScalePrior[NFACTORS];$psiData
  int<lower=1> NPATHS;
  int factorItemPath[2,NPATHS];  // 1 is factor index, 2 is item index",
		 '
  vector[NPATHS] pathScalePrior;',
		 '
  for (px in 1:NPATHS) {
    int fx = factorItemPath[1,px];
    int ix = factorItemPath[2,px];
    if (fx < 1 || fx > NFACTORS) {
      reject("factorItemPath[1,","px","] names factor ", fx, " (NFACTORS=",NFACTORS,")");
    }
    if (ix < 1 || ix > NITEMS) {
      reject("factorItemPath[2,","px","] names item ", ix, " (NITEMS=",NITEMS,")");
    }
    pathScalePrior[px] = factorScalePrior[fx];
  }').
    qq[
parameters {
  $multivariateThresholdParam$psiParam
  matrix[NPA,NFACTORS] rawFactor;      // do not interpret, see factor
  vector[NPATHS] rawLoadings; // do not interpret, see factorLoadings
  matrix[NPA,NITEMS] rawUniqueTheta; // do not interpret, see uniqueTheta
  vector[NITEMS] rawUnique;      // do not interpret, see unique
}
transformed parameters {
  $multivariateThresholdTParamDecl$psiTparam
  matrix[NPA,NITEMS] theta;
  vector[NPATHS] rawPathProp;  // always positive
  real rawPerComponentVar[NITEMS,1+NFACTORS];
  $multivariateThresholdTParam
  for (ix in 1:NITEMS) {
    theta[,ix] = rawUniqueTheta[,ix] * rawUnique[ix];
    rawPerComponentVar[ix, 1] = variance(theta[,ix]);
  }
  for (fx in 1:NFACTORS) {
    for (ix in 1:NITEMS) rawPerComponentVar[ix,1+fx] = 0;
  }
  for (px in 1:NPATHS) {
    int fx = factorItemPath[1,px];
    int ix = factorItemPath[2,px];
    vector[NPA] theta1 = rawLoadings[px] * rawFactor[,fx];
    rawPerComponentVar[ix,1+fx] = variance(theta1);
    theta[,ix] += theta1;
  }
  for (px in 1:NPATHS) {
    int fx = factorItemPath[1,px];
    int ix = factorItemPath[2,px];
    real resid = 0;
    real pred;
    for (cx in 1:(1+NFACTORS)) {
      if (cx == fx+1) {
        pred = rawPerComponentVar[ix,cx];
      } else {
        resid += rawPerComponentVar[ix,cx];
      }
    }
    rawPathProp[px] = pred / (pred + resid);
  }
}
model {
  $multivariateThresholdPrior$latentPrior
  rawLoadings ~ normal(0, 5.0);
  rawUnique ~ normal(0, 5.0);
  for (ix in 1:NITEMS) {
    rawUniqueTheta[,ix] ~ std_normal();
  }
  $multivariateQuickLikelihood
  target += normal_lpdf(logit(0.5 + rawPathProp/2.0) | 0, pathScalePrior);
}
generated quantities {$llDecl
  vector[NPATHS] pathProp = rawPathProp;
  vector[NITEMS] sigma;
  vector[NPATHS] pathLoadings = rawLoadings;
  matrix[NPA,NFACTORS] factor = rawFactor;
  matrix[NPA,NITEMS] residual;
  matrix[NITEMS,NITEMS] residualItemCor;
  int rawSeenFactor[NFACTORS];
  int rawNegateFactor[NFACTORS];

  for (ix in 1:NITEMS) {
    residual[,ix] = rawUniqueTheta[,ix] * rawUnique[ix];
    residual[,ix] -= mean(residual[,ix]);
  }
  residualItemCor = crossprod(residual);
  residualItemCor = quad_form_diag(residualItemCor, 1.0 ./ sqrt(diagonal(residualItemCor)));

  for (fx in 1:NITEMS) {
    sigma[fx] = sd(theta[,fx]);
  }
  for (fx in 1:NFACTORS) rawSeenFactor[fx] = 0;
  for (px in 1:NPATHS) {
    int fx = factorItemPath[1,px];
    int ix = factorItemPath[2,px];
    if (rawSeenFactor[fx] == 0) {
      rawSeenFactor[fx] = 1;
      rawNegateFactor[fx] = rawLoadings[px] < 0;
    }
    if (rawNegateFactor[fx]) {
      pathLoadings[px] = -pathLoadings[px];
    }
  }
  for (fx in 1:NFACTORS) {
    if (!rawNegateFactor[fx]) continue;
    factor[,fx] = -factor[,fx];
  }
  for (fx in 1:NPATHS) {
    if (pathLoadings[fx] < 0) pathProp[fx] = -pathProp[fx];
  }$llBody
}
];
}

sub openAndPreamble {
    my ($f) = @_;
    open my $fh, ">src/stan_files/$f.stan.new";
    print $fh '#include /pre/license.stan
functions {
#include /functions/pairwise.stan
}
';
    $fh
}

{
    my $fh = openAndPreamble('unidim');
    print $fh mkUnidim(0,0);
}
{
    my $fh = openAndPreamble('unidim_adapt');
    print $fh mkUnidim(1,0);
}
{
    my $fh = openAndPreamble('unidim_ll');
    print $fh mkUnidim(0,1);
}
{
    my $fh = openAndPreamble('correlation');
    print $fh mkCorModel(0);
}
{
    my $fh = openAndPreamble('correlation_ll');
    print $fh mkCorModel(1);
}
{
    my $fh = openAndPreamble('factor1');
    print $fh mkFactorModel(0,0);
}
{
    my $fh = openAndPreamble('factor1_ll');
    print $fh mkFactorModel(1,0);
}
{
    my $fh = openAndPreamble('factor');
    print $fh mkFactorModel(0,1);
}
{
    my $fh = openAndPreamble('factor_ll');
    print $fh mkFactorModel(1,1);
}

for my $f (qw(unidim unidim_adapt unidim_ll
 correlation correlation_ll factor1 factor1_ll
 factor factor_ll)) {
    my $old = "src/stan_files/$f.stan";
    my $new = "$old.new";
    if (-e $old && compare($old, $new) == 0) {
	unlink($new)
    } else {
	rename($new, $old)
    }
}
